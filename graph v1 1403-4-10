# فراخانی کاتبخانه ها
import random
import itertools
#pip install networkx
import networkx as nx
#pip install matplotlib
import matplotlib.pyplot as plt


# تابعی برای بررسی معتبر بودن رنگ‌آمیزی
def is_valid_coloring(graph, coloring):
    for u, v in graph.edges():
        if coloring[u] == coloring[v]:
            return False
    return True

# تابعی برای انجام رنگ‌آمیزی حریصانه روی گراف
def greedy_coloring(graph):
    coloring = {}
    for node in graph.nodes():
        # دریافت رنگ‌های گره‌های مجاور
        adjacent_colors = {coloring.get(neighbor) for neighbor in graph.neighbors(node)}
        # اختصاص کوچکترین رنگ ممکن که توسط گره‌های مجاور استفاده نشده است
        coloring[node] = next(color for color in itertools.count() if color not in adjacent_colors)
    return coloring

# دریافت تعداد گره‌ها از ورودی
n_node = int(input("enter count nodes: "))
G = nx.Graph()
G.add_nodes_from(range(n_node))

# اضافه کردن یال‌ها به صورت تصادفی با احتمال 0.1
for i in range(n_node):
    for j in range(i+1, n_node):
        if random.random() < 0.1:
            G.add_edge(i, j)

# انجام رنگ‌آمیزی حریصانه
coloring_result = greedy_coloring(G)
print('coloring:', coloring_result)
print('valid:', is_valid_coloring(G, coloring_result))
print('k:', len(set(coloring_result.values())))

# نمایش گراف با رنگ‌آمیزی
color_map = [coloring_result[node] for node in G.nodes()]
nx.draw(G, node_color=color_map, with_labels=True, font_weight='bold')
plt.show()
